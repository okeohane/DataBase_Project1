#include <iostream>
#include <iomanip>
#include <fstream>
#include <string>

using namespace std;

void main_Interface();
void search_ID(int id);
void search_Dept(string dept);
string search_dept(string dept);
void search_instructor(string dept);
void add_instructor(int id, string name, string dept);
bool existing_dept(string dept);
bool valid_ID(int ID);

int choice = 0;

int main() 
{
	int ID;
	string deptName;
	string instructorName = "";

	do
	{
		main_Interface();
		switch (choice)
		{
		case 1:
			cout << "Enter instructor ID : ";
			cin >> ID;
			search_ID(ID);
			cout << "\n\n TO RETURN TO MENU PRESS (0): ";
			cin >> choice;
			break;
		case 2:
			cout << "ENTER DEPARTMENT NAME: ";
			cin >> deptName;
			search_Dept(deptName);
			cout << "\n\n TO RETURN TO MENU PRESS (0): ";
			cin >> choice;
			break;
		case 3:
			cout << "ENTER THE INSTRUCTOR ID: ";
			cin >> ID;
			cout << "ENTER THE INSTRUCTOR NAME: ";
			cin.ignore();
			getline(cin, instructorName, '\n');
			cout << "ENTER THE AFFILIATED DEPARTMENT NAME: ";
			cin >> deptName;
			add_instructor(ID, instructorName, deptName);
			cout << "\n\n TO RETURN TO MENU PRESS (0): ";
			cin >> choice;
			break;
		case 4:
			break;
		}
	} while (choice == 0);
	return 0;
}

void main_Interface()
{

	cout << "=========================================================" << endl;
	cout << "\t  WELCOME TO MANHATTAN COLLEGE DATABASE \t" << endl;
	cout << "=========================================================" << endl << "\n\n";

	cout << "MENU" << endl;
	cout << "1. Enter the instructor ID and I will provide you with the name of the instructor, affiliated department and the location of that department." << endl;
	cout << "2. Enter the department name and I will provide you with the loacation, budget and names of all instructors that work for the department." << endl;
	cout << "3. Insert a record about a new instructor." << endl;
	cout << "4. Exit" << endl << endl;
	cout << "Enter 1, 2, 3 or 4: " << endl;
	cin >> choice;
}

void search_ID(int id)
{
	int ID;
	string name;
	string dept_name;
	fstream datafile_I;
	datafile_I.open("C:\\Users\\okeohane01\\Desktop\\instructor.txt");
	if (datafile_I)
	{
		while (datafile_I >> ID)
		{
			getline(datafile_I, name, ',');
			getline(datafile_I, name, ',');
			getline(datafile_I, dept_name);

			if (ID == id)
			{
				cout << "INSTRUCTOR ID: " << ID << endl;
				cout << "INSTRUCTOR NAME: " << name << endl;
				cout << "INSTRUCTOR DEPARTMENT: " << dept_name << endl;
				cout << "DEPARTMENT LOCATION: " << search_dept(dept_name) << endl;
				break;
			}
		}
		if (ID != id)
			cout << "THE ID DOES NOT APPEAR IN THE DATABASE.";
	}
	else
	{
		cout << "FILE COULD NOT BE OPENED" << endl;
	}
	datafile_I.close();
}

void search_Dept(string dept)
{
	int budget;
	string building;
	string dept_name;
	fstream datafile_D;
	datafile_D.open("C:\\Users\\okeohane01\\Desktop\\department.txt");


	if (datafile_D)
	{
		while (getline(datafile_D, dept_name, ','))
		{
			getline(datafile_D, building, ',');
			datafile_D >> budget;

			if (dept_name == dept)
			{
				cout << "DEPARTMENT NAME: " << dept_name << endl;
				cout << "DEPARTMENT LOCATION: " << building << endl;
				cout << "DEPARTMENT BUDGET: " << budget << endl;
				cout << "LIST OF INSTRUCTORS IN THIS DEPARTMENT" << endl;
				search_instructor(dept_name);
				break;
			}

			else
				getline(datafile_D, dept_name);
		}

		if (dept_name != dept)
		{
			cout << "THE DEPARTMENT NAME DOES NOT APPEAR IN THE DATABASE.";
		}
	}
	else
	{
		cout << "FILE COULD NOT BE OPENED" << endl;
	}
	datafile_D.close();
}

string search_dept(string dept)
{
	string dept_name;
	string building;
	int budget;
	fstream datafileD;
	datafileD.open("C:\\Users\\okeohane01\\Desktop\\department.txt");

	if (datafileD)
	{
		while (getline(datafileD, dept_name, ','))
		{
			getline(datafileD, building, ',');
			datafileD >> budget;

			if (dept_name == dept)
			{
				break;
			}

			else
				getline(datafileD, dept_name);
		}
	}
	else
	{
		cout << "FILE COULD NOT BE OPENED" << endl;

	}

	datafileD.close();

	return building;
}

void search_instructor(string dept)
{
	int id;
	string name;
	string dept_name;
	fstream datafileI;

	datafileI.open("C:\\Users\\okeohane01\\Desktop\\instructor.txt");
	if (datafileI)
	{
		while (datafileI >> id)
		{
			getline(datafileI, name, ',');
			getline(datafileI, name, ',');
			getline(datafileI, dept_name);

			if (dept_name == dept)
			{
				cout << name << endl;
			}
		}
	}

	else
		cout << "FILE COULD NOT BE OPENED" << endl;

	datafileI.close();
}

//for add instructor function

bool existing_dept(string dept)
{
	int budget;
	string building;
	string dept_name;
	fstream datafile_D;
	datafile_D.open("C:\\Users\\okeohane01\\Desktop\\department.txt");

	if (datafile_D)
	{
		while (getline(datafile_D, dept_name, ','))
		{
			getline(datafile_D, building, ',');
			datafile_D >> budget;

			if (dept_name == dept)	//if dept name entered is a match
			{
				return true;
				break;
			}

			else
				getline(datafile_D, dept_name);
		}

		if (dept_name != dept)	//if dept entered does not exist
		{
			return false;
		}
	}
	else
	{
		cout << "FILE COULD NOT BE OPENED" << endl;
	}
	datafile_D.close();
}

bool valid_ID(int ID)
{
	int id;
	string name;
	string dept_name;
	fstream datafile_I;
	datafile_I.open("C:\\Users\\okeohane01\\Desktop\\instructor.txt");
	if (datafile_I)
	{
		while (datafile_I >> id)
		{
			getline(datafile_I, name, ',');
			getline(datafile_I, name, ',');
			getline(datafile_I, dept_name);

			if (id == ID)	//if id entered already exists
			{
				return false;
			}
		}

		if (id != ID)
		{
			return true;
		}
	}
	else
	{
		cout << "FILE COULD NOT BE OPENED" << endl;
	}
	datafile_I.close();
}

void add_instructor(int id, string name, string dept)
{
	if (valid_ID(id) == true && existing_dept(dept) == true)
	{
		fstream outputFile;	//only need to open file if we are able to add to it
		outputFile.open("C:\\Users\\okeohane01\\Desktop\\instructor.txt", fstream::app);
		
		outputFile << endl << id << ",";
		outputFile << name << ",";
		outputFile << dept;
		cout << "Your file has been updated";
		outputFile.close();
	}
	else if (valid_ID(id) == false && existing_dept(dept) == false)
	{
		cout << "Instructor id duplicated AND department does not exist" << endl;
	}
	else if (valid_ID(id) == false)
	{
		cout << "Instructor id already exists in the file" << endl;
	}
	else if (existing_dept(dept) == false)
	{
		cout << "The department does not exist and hence the instructor record cannot be added to the database" << endl;
	}
	else
	{
		cout << "error";
	}
}
